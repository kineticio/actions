/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/authenticate': {
    post: {
      requestBody: components['requestBodies']['AuthenticationRequest'];
      responses: {
        200: components['responses']['AuthenticationResponse'];
      };
    };
  };
  '/start-workflow': {
    post: {
      requestBody: components['requestBodies']['StartWorkflowRequest'];
      responses: {
        200: components['responses']['WorkflowResponse'];
      };
    };
  };
  '/list-workflow-types': {
    get: {
      responses: {
        200: components['responses']['ListWorkflowTypesResponse'];
      };
    };
  };
  '/continue-workflow': {
    post: {
      requestBody: components['requestBodies']['ContinueWorkflowRequest'];
      responses: {
        200: components['responses']['WorkflowResponse'];
      };
    };
  };
  '/pickup-workflow/{workflowId}': {
    get: {
      parameters: {
        path: {
          workflowId: string;
        };
      };
      responses: {
        200: components['responses']['WorkflowResponse'];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    WorkflowType: {
      id: string;
      title: string;
      description: string;
      icon: string;
      category: string;
    };
    Breadcrumb: {
      key: string;
      value: string | number;
    };
    User: {
      id: string;
      email: string;
      name?: string;
    };
    WorkflowResponse: {
      [key: string]: unknown | undefined;
    };
    WorkflowPrompt:
      | components['schemas']['WorkflowPromptFormField']
      | components['schemas']['WorkflowPromptMessage']
      | components['schemas']['WorkflowPromptTable']
      | components['schemas']['WorkflowPromptTerminal']
      | components['schemas']['WorkflowPromptCompositeForm']
      | components['schemas']['WorkflowPromptStack'];
    WorkflowPromptFormField: {
      /** @enum {string} */
      $type: 'form-field';
      label?: string;
      helperText?: string;
      defaultValue?: string | number | boolean | null | string[];
      optional?: boolean;
      placeholder?: string;
      input:
        | components['schemas']['WorkflowPromptFormInput']
        | components['schemas']['WorkflowPromptFormSelectInput']
        | components['schemas']['WorkflowPromptFormMultiSelectInput']
        | components['schemas']['WorkflowPromptFormTableInput']
        | components['schemas']['WorkflowPromptCompositeForm'];
    };
    Option: {
      label: string;
      value: string;
    };
    /** @enum {string} */
    Severity: 'info' | 'warning' | 'error' | 'success';
    TableLinkCell: {
      /** @enum {string} */
      $type: 'link';
      href: string;
      text: string;
    };
    TableDateCell: {
      /** @enum {string} */
      $type: 'date';
      /** Format: date-time */
      date: string;
    };
    TableImageCell: {
      /** @enum {string} */
      $type: 'image';
      src: string;
      alt: string;
    };
    TableCell:
      | string
      | number
      | boolean
      | null
      | components['schemas']['TableLinkCell']
      | components['schemas']['TableDateCell']
      | components['schemas']['TableImageCell'];
    WorkflowPromptFormInput: {
      /** @enum {string} */
      $type?: 'text' | 'number' | 'email' | 'password' | 'boolean' | 'color' | 'image';
    };
    WorkflowPromptFormSelectInput: {
      /** @enum {string} */
      $type: 'select';
      /** @enum {string} */
      display: 'dropdown' | 'radio';
      options: components['schemas']['Option'][];
    };
    WorkflowPromptFormMultiSelectInput: {
      /** @enum {string} */
      $type: 'multi-select';
      /** @enum {string} */
      display: 'dropdown' | 'checkbox';
      options: components['schemas']['Option'][];
    };
    WorkflowPromptFormTableInput: {
      /** @enum {string} */
      $type: 'table';
      headers: string[];
      isMultiSelect: boolean;
      readonly?: boolean;
      rows: {
        key: string;
        cells: components['schemas']['TableCell'][];
      }[];
    };
    WorkflowPromptMessage: {
      /** @enum {string} */
      $type: 'message';
      title: string;
      message: string;
      dangerouslySetInnerHTML?: boolean;
      severity: components['schemas']['Severity'];
    };
    WorkflowPromptTable: {
      /** @enum {string} */
      $type: 'table';
      title?: string;
      headers: string[];
      rows: components['schemas']['TableCell'][][];
    };
    WorkflowPromptTerminal: {
      /** @enum {string} */
      $type: 'terminal';
      title: string;
      message: string;
      severity: components['schemas']['Severity'];
    };
    WorkflowPromptCompositeForm: {
      /** @enum {string} */
      $type: 'form';
      fields: {
        [key: string]: components['schemas']['WorkflowPromptFormField'] | undefined;
      };
    };
    WorkflowPromptStack: {
      /** @enum {string} */
      $type: 'stack';
      /** @enum {string} */
      direction: 'horizontal' | 'vertical';
      items: (
        | components['schemas']['WorkflowPromptFormField']
        | components['schemas']['WorkflowPromptMessage']
        | components['schemas']['WorkflowPromptTable']
        | components['schemas']['WorkflowPromptCompositeForm']
      )[];
    };
  };
  responses: {
    /** @description Response to list workflows */
    ListWorkflowTypesResponse: {
      content: {
        'application/json': {
          workflows: components['schemas']['WorkflowType'][];
        };
      };
    };
    /** @description Response for authentication */
    AuthenticationResponse: {
      content: {
        'application/json': components['schemas']['User'];
      };
    };
    /** @description Response to a workflow */
    WorkflowResponse: {
      content: {
        'application/json': {
          workflowId: string;
          promptId: string;
          breadcrumbs: components['schemas']['Breadcrumb'][];
          prompt: components['schemas']['WorkflowPrompt'];
          error?: string;
        };
      };
    };
  };
  parameters: never;
  requestBodies: {
    /** @description Request to start a workflow */
    StartWorkflowRequest: {
      content: {
        'application/json': {
          workflowTypeId: string;
        };
      };
    };
    /** @description Request to continue a workflow */
    ContinueWorkflowRequest: {
      content: {
        'application/json': {
          workflowId: string;
          promptId: string;
          response: components['schemas']['WorkflowResponse'];
        };
      };
    };
    /** @description Request to authenticate */
    AuthenticationRequest: {
      content: {
        'application/json': {
          username: string;
          password: string;
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
